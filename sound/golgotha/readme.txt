Author: crackdotcom, Dave Taylor, Jonathan Clark
License: Public Domain
Origin:  http://crack.com/golgotha_release
         http://www.crack.com/golgotha/free.html
         http://crack.com/golgotha/browse.html
         https://github.com/videogamepreservation/golgotha
         https://en.wikipedia.org/wiki/Crack_dot_Com
         http://kendeel.20m.com/G3DU/crackdotcom.htm



"YES! Free as in "free beer" and free as in "free speech." You can do anything you like with the source, graphics, music, and level files, including : sell it, include parts or all of it in your project, post it, copy it, and change it to your heart's content. The only restrictions lay in the code which we did not write and therefore do not own (i.e. the MP3 decoder code ). The author of MPG123 allows free use of that code for non profit use.

This code and data is "public domain" not to be confused with code released under a license such GPL. GPL sets limits on what you can do the code and conditions on it's use and we do not.

The trademarks "Crack dot Com" and "Golgotha" remain the property of crack.com. "


"Prior to the company's closing in October 1998, they were working on Golgotha, a hybrid of first-person shooter and real-time strategy. Crack dot com made the source and data for both Golgotha and Abuse public domain."

Since the announcement of the demise of Crack Dot Com I have been getting a lot of mail. The biggest question seems to be "why?". Abuse, Crack's first product, was one of those shareware games made on a shoe string budget by a "green team". Yet, it made it big in the commercial world, and many small developers hoping to do the same have looked at Crack dot Com as a role model. Fans addicted to Abuse anxiously awaited our next product with the expectation that it would be even better. When Crack Dot Com died, a lot of people wanted to know why or how this happened. So unfolds the story.

After finishing Abuse and receiving our first of many royalty checks for $250,000, we moved out of the apartment we working out of and into a real office. I begin developing Golgotha with very little knowledge of 3D computer graphics. At the time, the 3D gaming industry was just beginning, and no one knew for sure which way it would go. We knew it was going to big, and we wanted in on it. It was unclear at the time how important software rendering was going to be. We didn't know what features were going to be hardware accelerated, and which weren't. We could only guess at which 3D API would be the best supported.
The second big unknown was what kind of game would we make? We had just spent way to much time working on Abuse and didn't want to even think about Abuse II. The first idea we had was to make something like Gauntlet 3D. Gauntlet, for those of you who don't remember, was a multiplayer arcade game where you could pick between 4 characters and run around and kill, kill, kill, eat food, and collect treasures.

The way we were going to approach Gauntlet 3D was by letting the artist model the world in extremely complex detail and we would render out movie quality frames along a preset branching camera path. This idea is similar to an arcade game Area 51, except we were going to store a Z-buffer which would allow characters to be drawn into the scene freely and also we would have much more camera angles making the game less linear.

A problem we encountered was that modeling a realistic environment was a huge task. Adding to the difficulty of the task, our artist had no experience in the field. I remember in a particular level we wanted to have a dungeon. A certain artist begin by creating a single brick, then duplicating it several thousand times and building a wall out of the bricks. He kept complaining that his machine was too slow when he tried to render it. Needless to say this is not the best way to model a brick wall.

Another idea we entertained was a game called "Assassin" in which you play the part of an assassin who gets a mission to kill some famous person. You get the blueprints to their house, a list of weapons, and maybe some information about their bodyguards. We thought it would be great if we could have a mission where you could actually kill a certain famous political figure. We figured the publicity for such a game would be very strong and more importantly, free. But, it posed a number of burning legal questions. It is very illegal to even talk about killing the president of the United States. If we were to make a game about it, could we be arrested, or even worse, everyone who played the game? I called the FBI, CIA, secret service, the defense department, the pentagon, and several lawyers, but I couldn't get a straight answer. We quickly decided maybe it wasn't a good idea!

About this time we got hooked on playing a little game called Command and Conquer (C&C). This game was fun! Very fun. We wanted to make a game just like it, but we also wanted to make something 3D. The only fun 3D game I had ever played was Doom. This still holds true today for me. Naturally the thought occurred "Doom meets Command and Conquer". But what does this mean actually? Do you play first person driving in one of the vehicles, or maybe you can switch to any vehicle at anytime and take control. We played with many combinations of these ideas, but they never seemed to be what we were looking for. The problem boils down to : In Doom you are single character only concerned about your health and what's behind the corner, In C&C : you are a mastermind global strategist where everyone is expendable and you only care about how you are doing overall. The two don't work together. It seems obvious now, but we thought there had to be a way to make it work.

After discovering we couldn't make it have the level of fun we were looking for with "Doom meets C&C", we considered two options. One options was to make the game more action (Doom) based, the other was to make it more strategy based (C&C). First we tried the C&C approach, but the theory was that without fancy camera angles, it's hard to compete with the 2D strategy games coming out because of they can have more characters and better artwork. Then, we tried an action version, which is what you see in the final release. To make the game more action oriented we had to simplify the strategy aspect. This meant not spending all of your time "micro managing" units by clicking on them and then their destination/target. We setup up a system where all the paths that a vehicle could travel on where predefined by the level designer and you could only select a current path and then build a vehicle. Once built, the vehicle would travel down the path, fighting all the way, until it reached it's destination or was killed. This concept is similar to an old Apple game called Rescue Raiders. So, since you were not tied up planning strategy all the time, the world was your to explore in the first person. The problem that occurred here, is that all the vehicles would travel in straight lines and it was like shooting ducks at the county fair.

While all this planning, designing, and throwing away of ideas was occurring, money was being spent. Lots of it. Salary, rent, and other expenses took a ~$30K chunk out of bank every month. We had grown from 3 to 9 people and moved into a bigger office. To keep up with cost, we signed a deal to publish in Europe and Australia with TeleStar, and a deal to publish a Linux version with Red Hat. We also inked a deal with AMD to add AMD-3D acceleration, and we were in the process of talking with 3D sound card people, and specific 3D card people. Each time we signed a deal we put money in our pockets to keep us going, but we added more time to the project by having to promise certain things. As the water treading continued, the world was changing around us. Now, the minimum spec machine was not a P-133, 3d acceleration was a must, and other similar games had come out (Uprising & Battlezone). The games that came out didn't offer us any clues on how to make this genre fun. They also sold really poorly which was a signal to publishers that we would have a similar fate. This made finding the great publishing deal we had been holding out for for so long a near impossible task.

Around July, Crack first missed payroll. August came and we moved out of the office. September offered no new news, so we decided to call it quits. Rather than letting all that hard work sit around and rot, we released it to the public domain. After doing the same with Abuse and getting a tremendous response, we had to. Some people have said "Aren't you worried someone else could pick it up, finish the game and sell it". The answer is no. I don't mind if someone makes a profit off this work, which is a definite possibility. I think the engine can be used to make many different games, and I hope someone does just that. The soundtrack could be sold to a record, game, or movie company for 100k or more, and the textures have a fair value as well. But with debt that Crack dot Com accrued, even these sales would not have helped. We would much rather see other people learn from our work and our mistakes.

The experience gained by going through this process has helped me understand the business world in a way that I could never learn by reading about it or studying it in school. Personnel, management, accounting, and planning are skills just as important as the required technical skills in the computer industry. The only real way to learn these skills is through practice. Once you see how it all works and that you can do it, you are not afraid to try again.

Almost a year ago, I had an idea for some new networking technology that I felt could change the software industry in a big way. When Crack first missed payroll, I saw it as an opportunity to develop this technology and start a company that uses it. I have been working on it non stop since, pausing only to package up the data from Golgotha and place it at http://crack.com/golgotha_release. Because of the nature of the business I'm not able to discuss the details yet, but I am soliciting resumes and investors at http://crack.com/startup2.